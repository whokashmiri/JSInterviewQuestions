-JS is Synchronous and single threaded

Promises
A Promise is an object representing the eventual completion or failure of an asynchronous operation. It allows you to write asynchronous code in a more manageable way.
States of a Promise:
Pending: Initial state, neither fulfilled nor rejected.
Fulfilled: Operation completed successfully.
Rejected: Operation failed.

Fetch
The fetch function is used to make network requests. It returns a Promise that resolves to the Response object representing the response to the request.

Async/Await
async and await are syntactic sugar built on top of Promises. They make asynchronous code look and behave more like synchronous code, making it easier to read and write.

Promises, fetch, async/await, and then/catch are essential tools for handling asynchronous operations in JavaScript. They help you manage asynchronous code more effectively and make it easier to read and maintain.


Implicit binding in JavaScript refers to how the this keyword is automatically set to the object that is calling a function.

call: Invokes the function immediately with the specified this value and arguments provided individually.

apply: Invokes the function immediately with the specified this value and arguments provided as an array.

bind: Returns a new function with the specified this value and initial arguments, which can be called later.


Throttling
Throttling ensures a function is called at most once in a specified period. It’s useful for events that can fire very frequently, like scrolling.

Debouncing
Debouncing ensures a function is called only after a specified period of inactivity. It’s useful for events like typing, where you want to wait until the user has stopped typing before making an API call

function throttle(func, delay) {
  let lastCall = 0;
  return function(...args) {
    const now = new Date().getTime();
    if (now - lastCall < delay) {
      return;
    }
    lastCall = now;
    return func(...args);
  };
}

function debounce(func, delay) {
  let timeoutId;
  return function(...args) {
    clearTimeout(timeoutId);
    timeoutId = setTimeout(() => {
      func(...args);
    }, delay);
  };
}
